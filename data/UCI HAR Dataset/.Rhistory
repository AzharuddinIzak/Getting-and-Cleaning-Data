points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
3
mdist(x,y,cx,cy)
7
apply(distTmp,2,which.min)
3
points(x,y,pch=19,cex=2,col=cols1[newClust])
2
tapply(x,newClust,mean)
3
tapply(y,newClust,mean)
2
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
3
mdist(x,y,newCx,newCy)
2
apply(distTmp2,2,which.min)
4
points(x,y,pch=19,cex=2,col=cols1[newClust2])
4
tapply(x,newClust2,mean)
3
tapply(y,newClust2,mean)
1
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
2
kmeans(dataFrame,centers=3)
1
kmObj$iter
1
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
1
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
2
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
2
head(dataMatrix)
3
heatmap(dataMatrix)
3
myedit("addPatt.R")
2
source("addPatt.R", local=TRUE)
3
heatmap(dataMatrix)
mat
3
svd(mat)
3
matu %*% diag %*% t(matv)
4
svd(scale(mat))
scale(mat)
prcomp(scale(mat))
3
svd1$v[,1]
4
svd1$d
5
head(constantMatrix)
5
svd2$d
3
svd2$v[,1:2]
5
svd2$d
4
dim(faceData)
3
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1]) OR a1 <- svd1$u[,1] %*% t(svd1$v[,1]) * svd1$d[1]
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1]) OR a1 <- svd1$u[,1] %*% t(svd1$v[,1]) * svd1$d[1])
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1]) OR a1 <- svd1$u[,1] %*% t(svd1$v[,1]) * svd1$d[1]
2
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
3
myImage(a1)
2
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
3
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
2
dim(ssd)
1
names(ssd[562:563])
3
table(ssd$subject)
2
sum(table(ssd$subject))
3
table(ssd$activity)
1
sub1 <- subset(ssd, subject == 1)
2
dim(sub1)
2
names(sub1[1:12])
1
myedit("showXY.R")
3
showMe(1:6)
5
mdist <- dist(sub1[,1:3])
2
hclustering <- hclust(mdist)
1
myplclust(hclustering, lab.col = unclass(sub1$activity))
5
mdist <- dist(sub1[,10:12])
4
hclustering <- hclust(mdist)
1
myplclust(hclustering, lab.col = unclass(sub1$activity))
2
svd1 <- svd(scale(sub1[,-c(562,563)]))
svd1$u
dim(svd1$u)
3
maxCon <- which.max(svd1$v[,2])
4
mdist <- dist(sub1[,c(10:12,maxCon)])
5
hclustering <- hclust(mdist)
6
myplclust(hclustering, lab.col = unclass(sub1$activity))
6
names(sub1[maxCon])
6
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
4
table(kClust$cluster, sub1$activity)
6
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart=100)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart=100)
table(kClust$cluster, sub1$activity)
4
dim(kClust$centers)
5
laying <- which(kClust$size==29)
4
plot(kClust$centers[laying, 1:12],pch=19,ylab="Laying Cluster")
1
names(sub1[,1:3])
1
walkdown <- which(kClust$size==49)
5
plot(kClust$centers[walkdown, 1:12],pch=19,ylab="Walkdown Cluster")
1
Sys.getlocale("LC_TIME")
4
library(lubridate)
4
1
help(package = lubridate)
3
this_day <- today()
this_day
4
year(this_day)
3
wday(this_day)
4
wday(this_day, label = TRUE)
1
2
this_moment <- now()
this_moment
3
hour(this_moment)
2
my_date <- ymd("1989-05-17")
my_date
3
class(my_date)
3
ymd("1989 May 17")
5
1
mdy()
mdy(March 12, 1975)
mdy("March 12, 1975")
7
dmy(25081985)
ymd("192012")
3
ymd("1920/1/2")
5
dt1
ymd_hms("dt1")
ymd_hms(dt1)
3
hms("03:22:14")
2
dt2
3
ymd(dt2)
4
update(this_moment, hours = 8, minutes = 34, seconds = 55)
4
this_moment
2
update(this_moment, hours = 10, minutes = 16, seconds = 0)
4
this_moment<-update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
3
now("America/New_York")
nyc<-now("America/New_York")
nyc
5
nyc + days(2)
depart<-nyc + days(2)
depart
5
depart <- update(depart, hours = 17, minutes = 34)
depart
5
arrive <- depart + hours(15) + minutes(50)
6
?with_tz
4
with_tz(arrive, "Asia/Hong_Kong")
arrive<-with_tz(arrive, "Asia/Hong_Kong")
arrive
5
mdy("June 17, 2008", tz = "Singapore")
6
last_time<-mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
3
how_long<-interval(last_time,arrive)
as.period(how_long)
3
stopwatch()
library(swirl)
swirl()
2
dim(pm0)
3
head(pm0)
2
print(cnames)
21
cnames <- strsplit(cnames, "|", fixed = TRUE)
3
cnames
2
names(pm0) <- make.names(cnames[[1]][wcol])
2
head(pm0)
2
x0 <- pm0$Sample.Value
3
str(x0)
3
mean(is.na(x0))
23
names(pm1) <- make.names(cnames[[1]][wcol])
4
dim(pm1)
2
x1 <- pm1$Sample.Value
4
4
mean(is.na(x1))
3
summary(x0)
4
summary(x1)
4
boxplot(x0, x1)
4
boxplot(log10(x0), log10(x1))
2
negative <- x1 < 0
4
3
sum(negative, na.rm = TRUE)
34
mean(negative, na.rm = TRUE)
2
dates <- pm1$Date
4
str(dates)
3
dates <- as.Date(as.character(dates), "%Y%m%d")
2
head(dates)
3
hist(dates[negative],"month")
2
str(site0)
3
both <- intersect(site0, site1)
3
both
2
head(pm0)
2
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
3
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
3
sapply(split(cnt0, cnt0$county.site), nrow)
3
sapply(split(cnt1, cnt1$county.site), nrow)
1
pm0sub <- subset(cnt0, County.Code==63 & Site.ID==2008)
3
pm1sub <- subset(cnt1, County.Code==63 & Site.ID==2008)
2
x0sub <- pm0sub$Sample.Value
3
x1sub <- pm1sub$Sample.Value
3
dates0 <- as.Date(as.character(pm0sub$Date),"%Y%m%d")
3
dates1 <- as.Date(as.character(pm1sub$Date),"%Y%m%d")
3
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))
3
plot(dates0, x0sub, pch = 20)
4
abline(h = median(x0sub, na.rm = TRUE),lwd=2)
4
plot(dates1, x1sub, pch = 20)
3
abline(h = median(x1sub, na.rm = TRUE),lwd=2)
3
rng <- range(x0sub,x1sub,na.rm=TRUE)
rng
3
mn0 <- with(pm0,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
3
str(mn0)
4
mn1 <- with(pm1,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
3
str(mn1)
3
summary(mn0)
3
summary(mn1)
3
d0 <- data.frame(state = names(mn0), mean = mn0)
2
d1 <- data.frame(state = names(mn1), mean = mn1)
3
mrg <- merge(d0, d1, by = "state")
2
dim(mrg)
2
head(mrg)
2
with(mrg, plot(rep(1, 52), mrg[, 2], xlim = c(.5, 2.5)))
3
with(mrg, points(rep(2, 52), mrg[, 3]))
3
segments(rep(1, 52), mrg[, 2], rep(2, 52), mrg[, 3])
2
mrg[mrg$mean.x < mrg$mean.y,]
# 1. Merge the training and the test sets to create one data set.
# Read in the data from files
features     = read.table('./features.txt',header=FALSE); #imports features.txt
activityType = read.table('./activity_labels.txt',header=FALSE); #imports activity_labels.txt
subjectTrain = read.table('./train/subject_train.txt',header=FALSE); #imports subject_train.txt
xTrain       = read.table('./train/x_train.txt',header=FALSE); #imports x_train.txt
yTrain       = read.table('./train/y_train.txt',header=FALSE); #imports y_train.txt
# Assigin column names to the data imported above
colnames(activityType)  = c('activityId','activityType');
colnames(subjectTrain)  = "subjectId";
colnames(xTrain)        = features[,2];
colnames(yTrain)        = "activityId";
# cCreate the final training set by merging yTrain, subjectTrain, and xTrain
trainingData = cbind(yTrain,subjectTrain,xTrain);
# Read in the test data
subjectTest = read.table('./test/subject_test.txt',header=FALSE); #imports subject_test.txt
xTest       = read.table('./test/x_test.txt',header=FALSE); #imports x_test.txt
yTest       = read.table('./test/y_test.txt',header=FALSE); #imports y_test.txt
# Assign column names to the test data imported above
colnames(subjectTest) = "subjectId";
colnames(xTest)       = features[,2];
colnames(yTest)       = "activityId";
# Create the final test set by merging the xTest, yTest and subjectTest data
testData = cbind(yTest,subjectTest,xTest);
# Combine training and test data to create a final data set
finalData = rbind(trainingData,testData);
# Create a vector for the column names from the finalData, which will be used
# to select the desired mean() & stddev() columns
colNames  = colnames(finalData);
# 2. Extract only the measurements on the mean and standard deviation for each measurement.
# Create a logicalVector that contains TRUE values for the ID, mean() & stddev() columns and FALSE for others
logicalVector = (grepl("activity..",colNames) | grepl("subject..",colNames) | grepl("-mean..",colNames) & !grepl("-meanFreq..",colNames) & !grepl("mean..-",colNames) | grepl("-std..",colNames) & !grepl("-std()..-",colNames));
# Subset finalData table based on the logicalVector to keep only desired columns
finalData = finalData[logicalVector==TRUE];
# 3. Use descriptive activity names to name the activities in the data set
# Merge the finalData set with the acitivityType table to include descriptive activity names
finalData = merge(finalData,activityType,by='activityId',all.x=TRUE);
# Updating the colNames vector to include the new column names after merge
colNames  = colnames(finalData);
# 4. Appropriately label the data set with descriptive activity names.
# Cleaning up the variable names
for (i in 1:length(colNames))
{
colNames[i] = gsub("\\()","",colNames[i])
colNames[i] = gsub("-std$","StdDev",colNames[i])
colNames[i] = gsub("-mean","Mean",colNames[i])
colNames[i] = gsub("^(t)","time",colNames[i])
colNames[i] = gsub("^(f)","freq",colNames[i])
colNames[i] = gsub("([Gg]ravity)","Gravity",colNames[i])
colNames[i] = gsub("([Bb]ody[Bb]ody|[Bb]ody)","Body",colNames[i])
colNames[i] = gsub("[Gg]yro","Gyro",colNames[i])
colNames[i] = gsub("AccMag","AccMagnitude",colNames[i])
colNames[i] = gsub("([Bb]odyaccjerkmag)","BodyAccJerkMagnitude",colNames[i])
colNames[i] = gsub("JerkMag","JerkMagnitude",colNames[i])
colNames[i] = gsub("GyroMag","GyroMagnitude",colNames[i])
};
# Reassigning the new descriptive column names to the finalData set
colnames(finalData) = colNames;
# 5. Create a second, independent tidy data set with the average of each variable for each activity and each subject.
# Create a new table, finalDataNoActivityType without the activityType column
finalDataNoActivityType  = finalData[,names(finalData) != 'activityType'];
# Summarizing the finalDataNoActivityType table to include just the mean of each variable for each activity and each subject
tidyData    = aggregate(finalDataNoActivityType[,names(finalDataNoActivityType) != c('activityId','subjectId')],by=list(activityId=finalDataNoActivityType$activityId,subjectId = finalDataNoActivityType$subjectId),mean);
# Merging the tidyData with activityType to include descriptive acitvity names
tidyData    = merge(tidyData,activityType,by='activityId',all.x=TRUE);
# Export the tidyData set
write.table(tidyData, './tidyData.txt',row.names=TRUE,sep='\t')
getwd()
setwd("Coursera")
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile="./data/Dataset.zip")
# Unzip dataSet to /data directory
unzip(zipfile="./data/Dataset.zip",exdir="./data")
features     = read.table('./features.txt',header=FALSE); #imports features.txt
activityType = read.table('./activity_labels.txt',header=FALSE); #imports activity_labels.txt
subjectTrain = read.table('./train/subject_train.txt',header=FALSE); #imports subject_train.txt
xTrain       = read.table('./train/x_train.txt',header=FALSE); #imports x_train.txt
yTrain       = read.table('./train/y_train.txt',header=FALSE); #imports y_train.txt
features     = read.table('./features.txt',header=FALSE); #imports features.txt
setwd("data")
setwd("UCI HAR Dataset")
features     = read.table('./features.txt',header=FALSE); #imports features.txt
activityType = read.table('./activity_labels.txt',header=FALSE); #imports activity_labels.txt
subjectTrain = read.table('./train/subject_train.txt',header=FALSE); #imports subject_train.txt
xTrain       = read.table('./train/x_train.txt',header=FALSE); #imports x_train.txt
yTrain       = read.table('./train/y_train.txt',header=FALSE); #imports y_train.txt
# Assigin column names to the data imported above
colnames(activityType)  = c('activityId','activityType');
colnames(subjectTrain)  = "subjectId";
colnames(xTrain)        = features[,2];
colnames(yTrain)        = "activityId";
# cCreate the final training set by merging yTrain, subjectTrain, and xTrain
trainingData = cbind(yTrain,subjectTrain,xTrain);
# Read in the test data
subjectTest = read.table('./test/subject_test.txt',header=FALSE); #imports subject_test.txt
xTest       = read.table('./test/x_test.txt',header=FALSE); #imports x_test.txt
yTest       = read.table('./test/y_test.txt',header=FALSE); #imports y_test.txt
# Assign column names to the test data imported above
colnames(subjectTest) = "subjectId";
colnames(xTest)       = features[,2];
colnames(yTest)       = "activityId";
# Create the final test set by merging the xTest, yTest and subjectTest data
testData = cbind(yTest,subjectTest,xTest);
# Combine training and test data to create a final data set
finalData = rbind(trainingData,testData);
# Create a vector for the column names from the finalData, which will be used
# to select the desired mean() & stddev() columns
colNames  = colnames(finalData);
# 2. Extract only the measurements on the mean and standard deviation for each measurement.
# Create a logicalVector that contains TRUE values for the ID, mean() & stddev() columns and FALSE for others
logicalVector = (grepl("activity..",colNames) | grepl("subject..",colNames) | grepl("-mean..",colNames) & !grepl("-meanFreq..",colNames) & !grepl("mean..-",colNames) | grepl("-std..",colNames) & !grepl("-std()..-",colNames));
# Subset finalData table based on the logicalVector to keep only desired columns
finalData = finalData[logicalVector==TRUE];
# 3. Use descriptive activity names to name the activities in the data set
# Merge the finalData set with the acitivityType table to include descriptive activity names
finalData = merge(finalData,activityType,by='activityId',all.x=TRUE);
# Updating the colNames vector to include the new column names after merge
colNames  = colnames(finalData);
# 4. Appropriately label the data set with descriptive activity names.
# Cleaning up the variable names
for (i in 1:length(colNames))
{
colNames[i] = gsub("\\()","",colNames[i])
colNames[i] = gsub("-std$","StdDev",colNames[i])
colNames[i] = gsub("-mean","Mean",colNames[i])
colNames[i] = gsub("^(t)","time",colNames[i])
colNames[i] = gsub("^(f)","freq",colNames[i])
colNames[i] = gsub("([Gg]ravity)","Gravity",colNames[i])
colNames[i] = gsub("([Bb]ody[Bb]ody|[Bb]ody)","Body",colNames[i])
colNames[i] = gsub("[Gg]yro","Gyro",colNames[i])
colNames[i] = gsub("AccMag","AccMagnitude",colNames[i])
colNames[i] = gsub("([Bb]odyaccjerkmag)","BodyAccJerkMagnitude",colNames[i])
colNames[i] = gsub("JerkMag","JerkMagnitude",colNames[i])
colNames[i] = gsub("GyroMag","GyroMagnitude",colNames[i])
};
# Reassigning the new descriptive column names to the finalData set
colnames(finalData) = colNames;
# 5. Create a second, independent tidy data set with the average of each variable for each activity and each subject.
# Create a new table, finalDataNoActivityType without the activityType column
finalDataNoActivityType  = finalData[,names(finalData) != 'activityType'];
# Summarizing the finalDataNoActivityType table to include just the mean of each variable for each activity and each subject
tidyData    = aggregate(finalDataNoActivityType[,names(finalDataNoActivityType) != c('activityId','subjectId')],by=list(activityId=finalDataNoActivityType$activityId,subjectId = finalDataNoActivityType$subjectId),mean);
# Merging the tidyData with activityType to include descriptive acitvity names
tidyData    = merge(tidyData,activityType,by='activityId',all.x=TRUE);
# Export the tidyData set
write.table(tidyData, './tidyData.txt',row.names=TRUE,sep='\t')
